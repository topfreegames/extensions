// Code generated by MockGen. DO NOT EDIT.
// Source: pg/interfaces/pg.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	pg "github.com/go-pg/pg"
	orm "github.com/go-pg/pg/orm"
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/topfreegames/extensions/v9/pg/interfaces"
)

// MockQueryable is a mock of Queryable interface.
type MockQueryable struct {
	ctrl     *gomock.Controller
	recorder *MockQueryableMockRecorder
}

// MockQueryableMockRecorder is the mock recorder for MockQueryable.
type MockQueryableMockRecorder struct {
	mock *MockQueryable
}

// NewMockQueryable creates a new mock instance.
func NewMockQueryable(ctrl *gomock.Controller) *MockQueryable {
	mock := &MockQueryable{ctrl: ctrl}
	mock.recorder = &MockQueryableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryable) EXPECT() *MockQueryableMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockQueryable) Exec(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockQueryableMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockQueryable)(nil).Exec), varargs...)
}

// ExecOne mocks base method.
func (m *MockQueryable) ExecOne(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecOne indicates an expected call of ExecOne.
func (mr *MockQueryableMockRecorder) ExecOne(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecOne", reflect.TypeOf((*MockQueryable)(nil).ExecOne), varargs...)
}

// Model mocks base method.
func (m *MockQueryable) Model(model ...interface{}) *orm.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Model", varargs...)
	ret0, _ := ret[0].(*orm.Query)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockQueryableMockRecorder) Model(model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockQueryable)(nil).Model), model...)
}

// Query mocks base method.
func (m *MockQueryable) Query(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockQueryableMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryable)(nil).Query), varargs...)
}

// QueryOne mocks base method.
func (m *MockQueryable) QueryOne(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOne indicates an expected call of QueryOne.
func (mr *MockQueryableMockRecorder) QueryOne(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOne", reflect.TypeOf((*MockQueryable)(nil).QueryOne), varargs...)
}

// MockORM is a mock of ORM interface.
type MockORM struct {
	ctrl     *gomock.Controller
	recorder *MockORMMockRecorder
}

// MockORMMockRecorder is the mock recorder for MockORM.
type MockORMMockRecorder struct {
	mock *MockORM
}

// NewMockORM creates a new mock instance.
func NewMockORM(ctrl *gomock.Controller) *MockORM {
	mock := &MockORM{ctrl: ctrl}
	mock.recorder = &MockORMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockORM) EXPECT() *MockORMMockRecorder {
	return m.recorder
}

// CopyFrom mocks base method.
func (m *MockORM) CopyFrom(r io.Reader, query interface{}, params ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{r, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyFrom", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockORMMockRecorder) CopyFrom(r, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockORM)(nil).CopyFrom), varargs...)
}

// CopyTo mocks base method.
func (m *MockORM) CopyTo(w io.Writer, query interface{}, params ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{w, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyTo", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockORMMockRecorder) CopyTo(w, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{w, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockORM)(nil).CopyTo), varargs...)
}

// Delete mocks base method.
func (m *MockORM) Delete(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockORMMockRecorder) Delete(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockORM)(nil).Delete), model)
}

// ForceDelete mocks base method.
func (m *MockORM) ForceDelete(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceDelete", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceDelete indicates an expected call of ForceDelete.
func (mr *MockORMMockRecorder) ForceDelete(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDelete", reflect.TypeOf((*MockORM)(nil).ForceDelete), model)
}

// FormatQuery mocks base method.
func (m *MockORM) FormatQuery(b []byte, query string, params ...interface{}) []byte {
	m.ctrl.T.Helper()
	varargs := []interface{}{b, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FormatQuery", varargs...)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// FormatQuery indicates an expected call of FormatQuery.
func (mr *MockORMMockRecorder) FormatQuery(b, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{b, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatQuery", reflect.TypeOf((*MockORM)(nil).FormatQuery), varargs...)
}

// Insert mocks base method.
func (m *MockORM) Insert(model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockORMMockRecorder) Insert(model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockORM)(nil).Insert), model...)
}

// Select mocks base method.
func (m *MockORM) Select(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockORMMockRecorder) Select(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockORM)(nil).Select), model)
}

// Update mocks base method.
func (m *MockORM) Update(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockORMMockRecorder) Update(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockORM)(nil).Update), model)
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockDB) Begin() (*pg.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*pg.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockDBMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// Close mocks base method.
func (m *MockDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Context mocks base method.
func (m *MockDB) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDBMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDB)(nil).Context))
}

// CopyFrom mocks base method.
func (m *MockDB) CopyFrom(r io.Reader, query interface{}, params ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{r, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyFrom", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockDBMockRecorder) CopyFrom(r, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockDB)(nil).CopyFrom), varargs...)
}

// CopyTo mocks base method.
func (m *MockDB) CopyTo(w io.Writer, query interface{}, params ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{w, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyTo", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockDBMockRecorder) CopyTo(w, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{w, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockDB)(nil).CopyTo), varargs...)
}

// Delete mocks base method.
func (m *MockDB) Delete(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDBMockRecorder) Delete(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDB)(nil).Delete), model)
}

// Exec mocks base method.
func (m *MockDB) Exec(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDBMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDB)(nil).Exec), varargs...)
}

// ExecOne mocks base method.
func (m *MockDB) ExecOne(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecOne indicates an expected call of ExecOne.
func (mr *MockDBMockRecorder) ExecOne(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecOne", reflect.TypeOf((*MockDB)(nil).ExecOne), varargs...)
}

// ForceDelete mocks base method.
func (m *MockDB) ForceDelete(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceDelete", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceDelete indicates an expected call of ForceDelete.
func (mr *MockDBMockRecorder) ForceDelete(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDelete", reflect.TypeOf((*MockDB)(nil).ForceDelete), model)
}

// FormatQuery mocks base method.
func (m *MockDB) FormatQuery(b []byte, query string, params ...interface{}) []byte {
	m.ctrl.T.Helper()
	varargs := []interface{}{b, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FormatQuery", varargs...)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// FormatQuery indicates an expected call of FormatQuery.
func (mr *MockDBMockRecorder) FormatQuery(b, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{b, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatQuery", reflect.TypeOf((*MockDB)(nil).FormatQuery), varargs...)
}

// Insert mocks base method.
func (m *MockDB) Insert(model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDBMockRecorder) Insert(model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDB)(nil).Insert), model...)
}

// Model mocks base method.
func (m *MockDB) Model(model ...interface{}) *orm.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Model", varargs...)
	ret0, _ := ret[0].(*orm.Query)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockDBMockRecorder) Model(model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDB)(nil).Model), model...)
}

// Query mocks base method.
func (m *MockDB) Query(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDBMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDB)(nil).Query), varargs...)
}

// QueryOne mocks base method.
func (m *MockDB) QueryOne(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOne indicates an expected call of QueryOne.
func (mr *MockDBMockRecorder) QueryOne(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOne", reflect.TypeOf((*MockDB)(nil).QueryOne), varargs...)
}

// Select mocks base method.
func (m *MockDB) Select(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockDBMockRecorder) Select(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDB)(nil).Select), model)
}

// Update mocks base method.
func (m *MockDB) Update(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDBMockRecorder) Update(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDB)(nil).Update), model)
}

// WithContext mocks base method.
func (m *MockDB) WithContext(ctx context.Context) *pg.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(*pg.DB)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockDBMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockDB)(nil).WithContext), ctx)
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// CopyFrom mocks base method.
func (m *MockTx) CopyFrom(r io.Reader, query interface{}, params ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{r, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyFrom", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockTxMockRecorder) CopyFrom(r, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockTx)(nil).CopyFrom), varargs...)
}

// CopyTo mocks base method.
func (m *MockTx) CopyTo(w io.Writer, query interface{}, params ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{w, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyTo", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockTxMockRecorder) CopyTo(w, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{w, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockTx)(nil).CopyTo), varargs...)
}

// Delete mocks base method.
func (m *MockTx) Delete(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTxMockRecorder) Delete(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTx)(nil).Delete), model)
}

// Exec mocks base method.
func (m *MockTx) Exec(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTxMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTx)(nil).Exec), varargs...)
}

// ExecOne mocks base method.
func (m *MockTx) ExecOne(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecOne indicates an expected call of ExecOne.
func (mr *MockTxMockRecorder) ExecOne(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecOne", reflect.TypeOf((*MockTx)(nil).ExecOne), varargs...)
}

// ForceDelete mocks base method.
func (m *MockTx) ForceDelete(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceDelete", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceDelete indicates an expected call of ForceDelete.
func (mr *MockTxMockRecorder) ForceDelete(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDelete", reflect.TypeOf((*MockTx)(nil).ForceDelete), model)
}

// FormatQuery mocks base method.
func (m *MockTx) FormatQuery(b []byte, query string, params ...interface{}) []byte {
	m.ctrl.T.Helper()
	varargs := []interface{}{b, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FormatQuery", varargs...)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// FormatQuery indicates an expected call of FormatQuery.
func (mr *MockTxMockRecorder) FormatQuery(b, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{b, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatQuery", reflect.TypeOf((*MockTx)(nil).FormatQuery), varargs...)
}

// Insert mocks base method.
func (m *MockTx) Insert(model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTxMockRecorder) Insert(model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTx)(nil).Insert), model...)
}

// Model mocks base method.
func (m *MockTx) Model(model ...interface{}) *orm.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Model", varargs...)
	ret0, _ := ret[0].(*orm.Query)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockTxMockRecorder) Model(model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockTx)(nil).Model), model...)
}

// Query mocks base method.
func (m *MockTx) Query(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockTxMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTx)(nil).Query), varargs...)
}

// QueryOne mocks base method.
func (m *MockTx) QueryOne(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOne indicates an expected call of QueryOne.
func (mr *MockTxMockRecorder) QueryOne(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOne", reflect.TypeOf((*MockTx)(nil).QueryOne), varargs...)
}

// Rollback mocks base method.
func (m *MockTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback))
}

// Select mocks base method.
func (m *MockTx) Select(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockTxMockRecorder) Select(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockTx)(nil).Select), model)
}

// Update mocks base method.
func (m *MockTx) Update(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTxMockRecorder) Update(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTx)(nil).Update), model)
}

// MockTxWrapper is a mock of TxWrapper interface.
type MockTxWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockTxWrapperMockRecorder
}

// MockTxWrapperMockRecorder is the mock recorder for MockTxWrapper.
type MockTxWrapperMockRecorder struct {
	mock *MockTxWrapper
}

// NewMockTxWrapper creates a new mock instance.
func NewMockTxWrapper(ctrl *gomock.Controller) *MockTxWrapper {
	mock := &MockTxWrapper{ctrl: ctrl}
	mock.recorder = &MockTxWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxWrapper) EXPECT() *MockTxWrapperMockRecorder {
	return m.recorder
}

// DbBegin mocks base method.
func (m *MockTxWrapper) DbBegin(db interfaces.DB) (interfaces.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbBegin", db)
	ret0, _ := ret[0].(interfaces.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbBegin indicates an expected call of DbBegin.
func (mr *MockTxWrapperMockRecorder) DbBegin(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbBegin", reflect.TypeOf((*MockTxWrapper)(nil).DbBegin), db)
}

// MockCtxWrapper is a mock of CtxWrapper interface.
type MockCtxWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockCtxWrapperMockRecorder
}

// MockCtxWrapperMockRecorder is the mock recorder for MockCtxWrapper.
type MockCtxWrapperMockRecorder struct {
	mock *MockCtxWrapper
}

// NewMockCtxWrapper creates a new mock instance.
func NewMockCtxWrapper(ctrl *gomock.Controller) *MockCtxWrapper {
	mock := &MockCtxWrapper{ctrl: ctrl}
	mock.recorder = &MockCtxWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCtxWrapper) EXPECT() *MockCtxWrapperMockRecorder {
	return m.recorder
}

// WithContext mocks base method.
func (m *MockCtxWrapper) WithContext(ctx context.Context, db interfaces.DB) interfaces.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx, db)
	ret0, _ := ret[0].(interfaces.DB)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockCtxWrapperMockRecorder) WithContext(ctx, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockCtxWrapper)(nil).WithContext), ctx, db)
}

// MockDBTx is a mock of DBTx interface.
type MockDBTx struct {
	ctrl     *gomock.Controller
	recorder *MockDBTxMockRecorder
}

// MockDBTxMockRecorder is the mock recorder for MockDBTx.
type MockDBTxMockRecorder struct {
	mock *MockDBTx
}

// NewMockDBTx creates a new mock instance.
func NewMockDBTx(ctrl *gomock.Controller) *MockDBTx {
	mock := &MockDBTx{ctrl: ctrl}
	mock.recorder = &MockDBTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBTx) EXPECT() *MockDBTxMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockDBTx) Begin() (*pg.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*pg.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockDBTxMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDBTx)(nil).Begin))
}

// Close mocks base method.
func (m *MockDBTx) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBTxMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBTx)(nil).Close))
}

// Commit mocks base method.
func (m *MockDBTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDBTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDBTx)(nil).Commit))
}

// Context mocks base method.
func (m *MockDBTx) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDBTxMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDBTx)(nil).Context))
}

// CopyFrom mocks base method.
func (m *MockDBTx) CopyFrom(r io.Reader, query interface{}, params ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{r, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyFrom", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockDBTxMockRecorder) CopyFrom(r, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockDBTx)(nil).CopyFrom), varargs...)
}

// CopyTo mocks base method.
func (m *MockDBTx) CopyTo(w io.Writer, query interface{}, params ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{w, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyTo", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockDBTxMockRecorder) CopyTo(w, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{w, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockDBTx)(nil).CopyTo), varargs...)
}

// Delete mocks base method.
func (m *MockDBTx) Delete(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDBTxMockRecorder) Delete(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDBTx)(nil).Delete), model)
}

// Exec mocks base method.
func (m *MockDBTx) Exec(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDBTxMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBTx)(nil).Exec), varargs...)
}

// ExecOne mocks base method.
func (m *MockDBTx) ExecOne(arg0 interface{}, arg1 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecOne indicates an expected call of ExecOne.
func (mr *MockDBTxMockRecorder) ExecOne(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecOne", reflect.TypeOf((*MockDBTx)(nil).ExecOne), varargs...)
}

// ForceDelete mocks base method.
func (m *MockDBTx) ForceDelete(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceDelete", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceDelete indicates an expected call of ForceDelete.
func (mr *MockDBTxMockRecorder) ForceDelete(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDelete", reflect.TypeOf((*MockDBTx)(nil).ForceDelete), model)
}

// FormatQuery mocks base method.
func (m *MockDBTx) FormatQuery(b []byte, query string, params ...interface{}) []byte {
	m.ctrl.T.Helper()
	varargs := []interface{}{b, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FormatQuery", varargs...)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// FormatQuery indicates an expected call of FormatQuery.
func (mr *MockDBTxMockRecorder) FormatQuery(b, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{b, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatQuery", reflect.TypeOf((*MockDBTx)(nil).FormatQuery), varargs...)
}

// Insert mocks base method.
func (m *MockDBTx) Insert(model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDBTxMockRecorder) Insert(model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDBTx)(nil).Insert), model...)
}

// Model mocks base method.
func (m *MockDBTx) Model(model ...interface{}) *orm.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Model", varargs...)
	ret0, _ := ret[0].(*orm.Query)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockDBTxMockRecorder) Model(model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDBTx)(nil).Model), model...)
}

// Query mocks base method.
func (m *MockDBTx) Query(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDBTxMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBTx)(nil).Query), varargs...)
}

// QueryOne mocks base method.
func (m *MockDBTx) QueryOne(arg0, arg1 interface{}, arg2 ...interface{}) (orm.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryOne", varargs...)
	ret0, _ := ret[0].(orm.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOne indicates an expected call of QueryOne.
func (mr *MockDBTxMockRecorder) QueryOne(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOne", reflect.TypeOf((*MockDBTx)(nil).QueryOne), varargs...)
}

// Rollback mocks base method.
func (m *MockDBTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDBTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDBTx)(nil).Rollback))
}

// Select mocks base method.
func (m *MockDBTx) Select(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockDBTxMockRecorder) Select(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDBTx)(nil).Select), model)
}

// Update mocks base method.
func (m *MockDBTx) Update(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDBTxMockRecorder) Update(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDBTx)(nil).Update), model)
}

// WithContext mocks base method.
func (m *MockDBTx) WithContext(ctx context.Context) *pg.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(*pg.DB)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockDBTxMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockDBTx)(nil).WithContext), ctx)
}
